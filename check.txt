prompt文
<|start_header_id|>user<|end_header_id|>

<image>You are responsible for determining the direction an agent should move based on its current position and the target position. Follow these guidelines:
- The agent must reach the target.
- Respond with a single word: 'up', 'down', 'right', or 'left'. Do not use punctuation or extra explanations.
- The agent's color is blue, the target's color is red, and obstacles' color is green.
Choose one word: 'up', 'down', 'left', or 'right'.<|eot_id|><|start_header_id|>assistant<|end_header_id|>


input_ids
[128000, 128006, 882, 128007, 271, -200, 2675, 527, 8647, 369, 26679, 279, 5216, 459, 8479, 1288, 3351, 3196, 389, 1202, 1510, 2361, 323, 279, 2218, 2361, 13, 11359, 1521, 17959, 512, 12, 578, 8479, 2011, 5662, 279, 2218, 627, 12, 40633, 449, 264, 3254, 3492, 25, 364, 455, 518, 364, 2996, 518, 364, 1315, 518, 477, 364, 2414, 4527, 3234, 539, 1005, 62603, 477, 5066, 41941, 627, 12, 578, 8479, 596, 1933, 374, 6437, 11, 279, 2218, 596, 1933, 374, 2579, 11, 323, 32116, 6, 1933, 374, 6307, 627, 25017, 832, 3492, 25, 364, 455, 518, 364, 2996, 518, 364, 2414, 518, 477, 364, 1315, 4527, 128009, 128006, 78191, 128007, 271]
torch.tensor(input_ids, dtype=torch.long)
tensor([128000, 128006,    882, 128007,    271,   -200,   2675,    527,   8647,
           369,  26679,    279,   5216,    459,   8479,   1288,   3351,   3196,
           389,   1202,   1510,   2361,    323,    279,   2218,   2361,     13,
         11359,   1521,  17959,    512,     12,    578,   8479,   2011,   5662,
           279,   2218,    627,     12,  40633,    449,    264,   3254,   3492,
            25,    364,    455,    518,    364,   2996,    518,    364,   1315,
           518,    477,    364,   2414,   4527,   3234,    539,   1005,  62603,
           477,   5066,  41941,    627,     12,    578,   8479,    596,   1933,
           374,   6437,     11,    279,   2218,    596,   1933,    374,   2579,
            11,    323,  32116,      6,   1933,    374,   6307,    627,  25017,
           832,   3492,     25,    364,    455,    518,    364,   2996,    518,
           364,   2414,    518,    477,    364,   1315,   4527, 128009, 128006,
         78191, 128007,    271])
image_inputs　画像データを前処理して画像認識モデルに入力できる形式に変換したもの，processorインスタンスにより生成
tensor([[[1., 1., 1.,  ..., 1., 1., 1.],
         [1., 1., 1.,  ..., 1., 1., 1.],
         [1., 1., 1.,  ..., 1., 1., 1.],
         ...,
         [1., 1., 1.,  ..., 1., 1., 1.],
         [1., 1., 1.,  ..., 1., 1., 1.],
         [1., 1., 1.,  ..., 1., 1., 1.]],

        [[1., 1., 1.,  ..., 1., 1., 1.],
         [1., 1., 1.,  ..., 1., 1., 1.],
         [1., 1., 1.,  ..., 1., 1., 1.],
         ...,
         [1., 1., 1.,  ..., 1., 1., 1.],
         [1., 1., 1.,  ..., 1., 1., 1.],
         [1., 1., 1.,  ..., 1., 1., 1.]],

        [[1., 1., 1.,  ..., 1., 1., 1.],
         [1., 1., 1.,  ..., 1., 1., 1.],
         [1., 1., 1.,  ..., 1., 1., 1.],
         ...,
         [1., 1., 1.,  ..., 1., 1., 1.],
         [1., 1., 1.,  ..., 1., 1., 1.],
         [1., 1., 1.,  ..., 1., 1., 1.]]], device='mps:0')
image_forward_outs 認識モデルに画像データを入力した後の出力
BaseModelOutputWithPooling(last_hidden_state=tensor([[[-3.0117,  0.0265,  1.1641,  ...,  0.4180, -1.2021, -0.2008],
         [-0.1019, -0.2600, -0.3535,  ..., -0.0357,  0.3459, -0.1576],
         [-0.1134, -0.3113, -0.1409,  ...,  0.0732,  0.0731,  0.1426],
         ...,
         [-0.9048,  0.0731,  1.3125,  ..., -0.1990, -0.1545, -0.0804],
         [-2.3516,  0.9961,  2.4844,  ...,  0.0650, -2.6602, -0.5801],
         [-2.6621,  0.4731,  1.4424,  ..., -0.1039, -1.8018, -0.5542]]],
       device='mps:0', dtype=torch.float16), pooler_output=tensor([[ 0.2959, -0.4148, -0.2134,  ...,  0.1899, -0.3269,  0.3401]],
       device='mps:0', dtype=torch.float16), hidden_states=(tensor([[[1.3809, 1.4785, 1.2197,  ..., 1.3828, 2.6406, 1.4561],
         [1.3828, 1.5029, 1.2607,  ..., 1.3945, 2.3086, 1.4482],
         [1.3828, 1.5273, 1.2900,  ..., 1.4014, 2.1367, 1.4473],
         ...,
         [1.4277, 1.4990, 1.3154,  ..., 1.4238, 1.2627, 1.4473],
         [1.3799, 1.5479, 1.2744,  ..., 1.4111, 1.1406, 1.4404],
         [1.3662, 1.5605, 1.2314,  ..., 1.4043, 0.7402, 1.4150]]],
       device='mps:0', dtype=torch.float16), tensor([[[1.6270, 1.5547, 1.6152,  ..., 1.5391, 2.3516, 1.5684],
         [1.5938, 1.5957, 1.6494,  ..., 1.5742, 2.0391, 1.5908],
         [1.6152, 1.6123, 1.6719,  ..., 1.5430, 1.8389, 1.5625],
         ...,
         [1.6045, 1.6348, 1.7031,  ..., 1.6152, 1.2500, 1.6182],
         [1.6064, 1.6211, 1.6875,  ..., 1.6064, 0.8921, 1.5840],
         [1.6162, 1.6250, 1.6533,  ..., 1.5664, 0.4900, 1.5332]]],
       device='mps:0', dtype=torch.float16), tensor([[[1.5674, 1.6172, 1.5664,  ..., 1.6289, 2.1719, 1.4619],
         [1.5322, 1.6865, 1.6270,  ..., 1.6094, 1.9229, 1.5312],
         [1.5518, 1.7393, 1.7051,  ..., 1.5732, 1.7275, 1.4756],
         ...,
         [1.5059, 1.7324, 1.6279,  ..., 1.6270, 1.3105, 1.6113],
         [1.5693, 1.6221, 1.6016,  ..., 1.6611, 1.0303, 1.5547],
         [1.5928, 1.6670, 1.5811,  ..., 1.6650, 0.6270, 1.4688]]],
       device='mps:0', dtype=torch.float16), tensor([[[1.3701, 1.4863, 1.7666,  ..., 1.6953, 1.8652, 1.4785],
         [1.6191, 1.6777, 1.9043,  ..., 1.4609, 1.6172, 1.3799],
         [1.6934, 1.7734, 1.9863,  ..., 1.3418, 1.4258, 1.2852],
         ...,
         [1.5303, 1.6504, 1.7549,  ..., 1.6982, 1.4326, 1.6123],
         [1.4414, 1.5156, 1.7861,  ..., 1.7236, 1.0508, 1.5518],
         [1.3701, 1.5215, 1.7891,  ..., 1.7539, 0.6265, 1.5195]]],
       device='mps:0', dtype=torch.float16), tensor([[[1.3799, 1.5400, 1.7861,  ..., 1.8799, 1.9834, 1.5498],
         [1.6348, 1.6338, 1.8154,  ..., 1.5107, 1.6484, 1.3682],
         [1.8115, 1.6689, 1.7773,  ..., 1.3369, 1.3906, 1.1523],
         ...,
         [1.7471, 1.5107, 1.5547,  ..., 1.7695, 1.7246, 1.6465],
         [1.4951, 1.4307, 1.6689,  ..., 1.8662, 1.3379, 1.6299],
         [1.2812, 1.4258, 1.8047,  ..., 1.9756, 0.8022, 1.5889]]],
       device='mps:0', dtype=torch.float16), tensor([[[1.4766, 1.4570, 1.6035,  ..., 1.9072, 1.9092, 1.5156],
         [1.7012, 1.6846, 1.5107,  ..., 1.6592, 1.5762, 1.4629],
         [1.8926, 1.6523, 1.5557,  ..., 1.5713, 1.2734, 1.2656],
         ...,
         [1.7734, 1.4951, 1.3555,  ..., 1.8955, 1.5518, 1.6201],
         [1.5068, 1.5156, 1.4189,  ..., 1.9502, 1.2119, 1.5078],
         [1.3398, 1.5205, 1.6631,  ..., 1.9805, 0.7627, 1.4346]]],
       device='mps:0', dtype=torch.float16), tensor([[[1.5801, 1.7588, 1.4287,  ..., 1.6641, 1.7656, 1.5078],
         [1.7188, 1.7129, 1.3242,  ..., 1.6260, 1.4922, 1.3672],
         [1.8613, 1.7178, 1.3877,  ..., 1.5264, 1.2109, 1.1943],
         ...,
         [1.6562, 1.4678, 1.2188,  ..., 1.7773, 1.4502, 1.5000],
         [1.4717, 1.5391, 1.3027,  ..., 1.8184, 1.1992, 1.4150],
         [1.3252, 1.6182, 1.4082,  ..., 1.9121, 0.5991, 1.4258]]],
       device='mps:0', dtype=torch.float16), tensor([[[1.6826, 1.6055, 1.5908,  ..., 1.7393, 1.9551, 1.5293],
         [1.6826, 1.6328, 1.3047,  ..., 1.5215, 1.4678, 1.5801],
         [1.8828, 1.7314, 1.2959,  ..., 1.5146, 1.2461, 1.5107],
         ...,
         [1.6182, 1.2842, 1.2578,  ..., 1.6318, 1.2920, 1.8643],
         [1.5742, 1.3701, 1.4434,  ..., 1.6855, 1.1318, 1.5967],
         [1.5518, 1.4639, 1.5176,  ..., 1.8691, 0.6387, 1.4453]]],
       device='mps:0', dtype=torch.float16), tensor([[[1.5928, 1.6367, 1.6436,  ..., 1.8223, 1.7549, 1.2520],
         [1.6445, 1.6357, 1.4980,  ..., 1.6582, 1.4180, 1.6211],
         [1.8066, 1.7061, 1.4971,  ..., 1.5459, 1.2275, 1.4932],
         ...,
         [1.5879, 1.2920, 1.4883,  ..., 1.6523, 1.1816, 1.5840],
         [1.5498, 1.4893, 1.7012,  ..., 1.7227, 1.0576, 1.3525],
         [1.4570, 1.5928, 1.5967,  ..., 1.8701, 0.6411, 1.2715]]],
       device='mps:0', dtype=torch.float16), tensor([[[1.5205, 1.6494, 1.6338,  ..., 1.6924, 1.8623, 1.5713],
         [1.6826, 1.5283, 1.3115,  ..., 1.4434, 1.4902, 1.5322],
         [1.7764, 1.5596, 1.4453,  ..., 1.4102, 1.3477, 1.5400],
         ...,
         [1.6855, 1.3818, 1.5508,  ..., 1.4844, 1.2812, 1.7217],
         [1.5010, 1.4941, 1.7051,  ..., 1.4912, 1.1016, 1.6504],
         [1.4229, 1.6201, 1.6475,  ..., 1.6172, 0.8037, 1.6689]]],
       device='mps:0', dtype=torch.float16), tensor([[[1.4248, 1.5742, 1.3633,  ..., 1.5879, 1.8252, 1.4014],
         [1.5557, 1.4531, 1.3330,  ..., 1.5225, 1.4463, 1.6641],
         [1.6006, 1.5566, 1.5430,  ..., 1.4531, 1.4395, 1.8633],
         ...,
         [1.7959, 1.3193, 1.8633,  ..., 1.6641, 1.5762, 2.0098],
         [1.4990, 1.4004, 1.7354,  ..., 1.5498, 1.3066, 1.6318],
         [1.3379, 1.6240, 1.3770,  ..., 1.4785, 1.1055, 1.4375]]],
       device='mps:0', dtype=torch.float16), tensor([[[1.2637, 1.7383, 1.1650,  ..., 1.4531, 1.4766, 1.1768],
         [1.5889, 1.4463, 1.3789,  ..., 1.3750, 1.5225, 1.5479],
         [1.6348, 1.5381, 1.5820,  ..., 1.3057, 1.4521, 1.8848],
         ...,
         [1.7295, 1.4785, 1.8799,  ..., 1.8096, 1.5332, 1.9531],
         [1.4961, 1.6006, 1.7383,  ..., 1.5840, 1.3223, 1.7129],
         [1.3516, 1.6953, 1.2393,  ..., 1.3164, 0.9932, 1.3652]]],
       device='mps:0', dtype=torch.float16), tensor([[[1.1924, 1.9541, 0.8916,  ..., 1.6299, 1.3320, 0.9966],
         [1.6445, 1.1240, 1.2246,  ..., 1.3408, 1.3936, 1.5977],
         [1.6699, 1.4229, 1.5820,  ..., 1.3916, 1.4902, 1.8359],
         ...,
         [1.9355, 1.6123, 1.8076,  ..., 1.9980, 1.4209, 1.9033],
         [1.4648, 1.8809, 1.8379,  ..., 1.6094, 1.1934, 1.8457],
         [1.3438, 1.9160, 1.0820,  ..., 1.4912, 0.8911, 1.3145]]],
       device='mps:0', dtype=torch.float16), tensor([[[1.0820, 1.9854, 0.9971,  ..., 1.5137, 1.3506, 1.3535],
         [1.5820, 1.0098, 0.9453,  ..., 1.3164, 1.3242, 1.7930],
         [1.5332, 1.4707, 1.4688,  ..., 1.3242, 1.3320, 1.9229],
         ...,
         [1.9482, 1.7119, 1.7148,  ..., 1.7646, 1.3701, 2.1250],
         [1.3887, 1.8926, 1.5967,  ..., 1.5146, 1.0947, 2.0371],
         [1.3467, 2.0176, 1.0371,  ..., 1.4023, 0.8501, 1.5605]]],
       device='mps:0', dtype=torch.float16), tensor([[[0.7188, 1.8555, 1.1084,  ..., 1.4736, 1.4297, 1.1230],
         [1.6689, 1.0215, 0.9604,  ..., 1.3350, 1.5547, 1.6621],
         [1.7539, 1.3633, 1.4375,  ..., 1.3965, 1.5107, 1.6494],
         ...,
         [1.8936, 1.6387, 1.6133,  ..., 1.7588, 1.7529, 1.7852],
         [1.1670, 1.8027, 1.5742,  ..., 1.3643, 1.2256, 1.7031],
         [1.0615, 1.8574, 1.0264,  ..., 1.2568, 0.9829, 1.3730]]],
       device='mps:0', dtype=torch.float16), tensor([[[0.3569, 1.6074, 0.8052,  ..., 1.4355, 1.6396, 0.6982],
         [1.6455, 0.8828, 0.8105,  ..., 1.2959, 1.5947, 1.7900],
         [1.7061, 1.1611, 1.3115,  ..., 1.3398, 1.6338, 1.8311],
         ...,
         [1.5918, 1.3643, 1.4775,  ..., 1.9355, 1.7842, 1.9355],
         [0.9312, 1.6445, 1.3096,  ..., 1.3398, 1.3457, 1.6416],
         [0.6787, 1.6641, 0.7939,  ..., 1.0859, 1.2510, 1.2285]]],
       device='mps:0', dtype=torch.float16), tensor([[[0.5635, 1.7139, 1.2412,  ..., 1.5127, 1.3262, 0.7500],
         [1.7754, 0.9429, 0.8086,  ..., 1.1562, 1.5332, 1.8691],
         [1.8877, 1.1113, 1.2080,  ..., 1.2041, 1.5742, 1.8779],
         ...,
         [1.6445, 1.4639, 1.8223,  ..., 1.8994, 1.3936, 1.8965],
         [0.9214, 1.8467, 1.6162,  ..., 1.4883, 0.9565, 1.7930],
         [0.7646, 1.8154, 1.1494,  ..., 1.2031, 0.9971, 1.3135]]],
       device='mps:0', dtype=torch.float16), tensor([[[0.3916, 1.5879, 1.2090,  ..., 1.4941, 1.6250, 0.9150],
         [1.6484, 0.7500, 0.9585,  ..., 0.9727, 1.6084, 1.8047],
         [1.8525, 1.0342, 1.3125,  ..., 1.0566, 1.6631, 1.8623],
         ...,
         [1.6035, 1.2783, 2.0078,  ..., 1.6328, 1.8428, 1.6797],
         [0.8428, 1.8828, 1.7031,  ..., 1.3057, 1.1396, 1.6162],
         [0.6836, 1.7988, 1.1904,  ..., 1.1992, 1.1777, 1.3535]]],
       device='mps:0', dtype=torch.float16), tensor([[[0.3984, 1.5625, 1.2734,  ..., 1.4434, 1.4053, 0.8169],
         [1.6465, 0.9521, 0.8359,  ..., 1.1182, 1.4434, 1.6406],
         [1.8418, 1.2578, 1.2041,  ..., 1.2314, 1.5410, 1.8252],
         ...,
         [1.3633, 1.3828, 1.8750,  ..., 1.4004, 1.7295, 1.4004],
         [0.7646, 1.7695, 1.5566,  ..., 1.0957, 0.8086, 1.5986],
         [0.5586, 1.7812, 1.0801,  ..., 1.3037, 0.7954, 1.3721]]],
       device='mps:0', dtype=torch.float16), tensor([[[-0.0588,  1.2256,  1.6875,  ...,  1.5283,  1.7812,  0.2610],
         [ 1.5820,  0.5396,  0.5747,  ...,  1.0840,  1.6377,  1.4854],
         [ 1.6816,  0.8726,  0.9023,  ...,  1.1982,  1.7861,  1.5576],
         ...,
         [ 1.2510,  1.3672,  1.7920,  ...,  1.3994,  2.0117,  1.3477],
         [ 0.3726,  1.5889,  1.7021,  ...,  1.1934,  1.2969,  0.9727],
         [ 0.1759,  1.4141,  1.5605,  ...,  1.4971,  1.5869,  0.5771]]],
       device='mps:0', dtype=torch.float16), tensor([[[-0.4307,  1.0488,  1.8262,  ...,  1.6699,  1.5020, -0.2925],
         [ 1.3945,  0.4607,  0.3938,  ...,  1.2393,  1.6279,  1.3418],
         [ 1.6152,  0.8027,  0.7764,  ...,  1.4395,  1.6914,  1.3281],
         ...,
         [ 1.0938,  1.2070,  1.3594,  ...,  1.1533,  1.6240,  1.0098],
         [-0.1902,  1.7617,  1.7617,  ...,  1.1797,  1.0791,  0.3613],
         [-0.1161,  1.7266,  1.9307,  ...,  1.5098,  1.0137, -0.0508]]],
       device='mps:0', dtype=torch.float16), tensor([[[-0.5552,  0.7988,  2.1641,  ...,  1.8389,  1.2402, -0.4238],
         [ 0.9287,  0.5176,  0.2866,  ...,  1.4229,  1.5781,  1.4727],
         [ 1.2461,  0.7407,  0.6777,  ...,  1.6250,  1.8701,  1.4629],
         ...,
         [ 0.8774,  1.2559,  1.5967,  ...,  0.5811,  1.3193,  1.3984],
         [-0.4243,  1.7305,  1.8408,  ...,  1.1162,  0.7798,  0.5327],
         [-0.1423,  1.6602,  2.3789,  ...,  1.7773,  0.8223, -0.0090]]],
       device='mps:0', dtype=torch.float16), tensor([[[-0.3923,  1.3340,  2.1504,  ...,  1.6055,  1.1621, -0.0586],
         [ 1.2793,  1.1211, -0.0791,  ...,  1.4922,  2.0938,  1.4863],
         [ 1.6250,  1.2705,  0.2764,  ...,  1.6621,  2.4258,  1.4922],
         ...,
         [ 1.1367,  1.5859,  1.4980,  ...,  0.6387,  1.5703,  1.9033],
         [-0.2029,  2.4629,  1.7578,  ...,  1.0469,  0.5576,  0.9668],
         [ 0.0828,  2.3828,  2.3867,  ...,  1.6260,  0.6992,  0.4399]]],
       device='mps:0', dtype=torch.float16), tensor([[[-0.4546,  1.5977,  2.3125,  ...,  1.3193,  1.6357, -0.5342],
         [ 1.1035,  1.5176, -0.1270,  ...,  1.4648,  2.5352,  1.2012],
         [ 1.5527,  1.6416,  0.1357,  ...,  1.7480,  2.8281,  1.1973],
         ...,
         [ 1.1309,  1.8330,  1.3203,  ...,  0.4683,  1.7744,  1.3203],
         [-0.2896,  2.9395,  2.2695,  ...,  0.3442,  0.4346,  0.1235],
         [ 0.1570,  2.9102,  2.7070,  ...,  1.1602,  0.8076, -0.2437]]],
       device='mps:0', dtype=torch.float16), tensor([[[-0.2637,  1.5215,  2.9492,  ...,  1.3477,  1.3936, -0.5288],
         [ 1.4746,  1.5391,  0.3909,  ...,  1.3027,  2.6230,  1.2148],
         [ 1.6816,  1.4766,  0.4285,  ...,  1.5703,  2.9199,  1.5283],
         ...,
         [ 1.2930,  0.8364,  2.2695,  ..., -0.5225,  1.2295,  1.6846],
         [ 0.1841,  2.9512,  3.3789,  ..., -0.0801, -0.0557,  0.3301],
         [ 0.2852,  2.6602,  3.2793,  ...,  1.0938,  0.6753, -0.2478]]],
       device='mps:0', dtype=torch.float16), tensor([[[-0.8286,  1.4512,  3.3945,  ...,  1.4648,  0.3564, -0.1156],
         [ 1.2275,  0.6660,  0.3425,  ...,  0.3662,  3.3477,  1.6504],
         [ 1.7705,  1.4062,  0.0116,  ...,  1.3086,  3.3770,  1.6846],
         ...,
         [ 0.6738,  1.6807,  3.3906,  ..., -0.7310,  0.7793,  2.0625],
         [-0.1716,  3.5410,  3.8594,  ..., -0.2896, -0.4639,  0.5557],
         [-0.0768,  2.2969,  3.7168,  ...,  1.0479,  0.0225, -0.2427]]],
       device='mps:0', dtype=torch.float16), tensor([[[-2.9238,  0.5293,  3.2773,  ...,  0.7354, -0.5830,  0.7686],
         [ 0.5215,  0.2764,  1.1484,  ..., -0.0393,  3.0215,  2.1055],
         [ 1.2637,  1.0996,  0.3108,  ...,  1.3359,  2.5371,  2.2031],
         ...,
         [ 0.0879,  1.8359,  3.9980,  ..., -0.1167,  0.7402,  1.8301],
         [-1.0479,  2.8066,  3.7578,  ...,  0.6943, -1.1816,  0.3757],
         [-1.5156,  1.4893,  3.7930,  ...,  0.5161, -0.8848,  0.2573]]],
       device='mps:0', dtype=torch.float16), tensor([[[-3.2539,  1.0723,  2.9336,  ...,  2.0586, -0.4482,  1.0781],
         [-1.0049, -2.0000, -1.4795,  ...,  1.2021,  2.1113,  0.1523],
         [-1.6328, -3.2285, -0.5898,  ...,  2.0332,  0.5225,  2.3906],
         ...,
         [-0.4670,  1.1221,  3.3574,  ...,  1.1543,  0.9150,  1.2637],
         [-2.2070,  2.6230,  4.7852,  ...,  1.5742, -2.2969,  0.5078],
         [-2.3594,  1.7842,  3.1934,  ...,  1.3496, -0.9888,  0.6133]]],
       device='mps:0', dtype=torch.float16)), attentions=None)
image_features image_forward_outsの後ろから2層目の出力だけを抽出したもの
tensor([[[-2.9238,  0.5293,  3.2773,  ...,  0.7354, -0.5830,  0.7686],
         [ 0.5215,  0.2764,  1.1484,  ..., -0.0393,  3.0215,  2.1055],
         [ 1.2637,  1.0996,  0.3108,  ...,  1.3359,  2.5371,  2.2031],
         ...,
         [ 0.0879,  1.8359,  3.9980,  ..., -0.1167,  0.7402,  1.8301],
         [-1.0479,  2.8066,  3.7578,  ...,  0.6943, -1.1816,  0.3757],
         [-1.5156,  1.4893,  3.7930,  ...,  0.5161, -0.8848,  0.2573]]],
       device='mps:0', dtype=torch.float16)
projected_embeddings 画像の特徴ベクトル(image_features)を別の埋め込み空間にマッピングし，テキストの埋め込みベクトルと結合できるようにする
tensor([[[-0.0476,  0.1494,  0.2488,  ...,  0.1517, -0.1035,  0.2844],
         [ 0.9155,  0.6230, -1.1436,  ..., -0.6484, -0.3184,  0.3684],
         [-0.6348,  0.5273, -0.2754,  ..., -0.0695, -0.6426, -1.1025],
         ...,
         [ 0.8364,  0.1163,  1.0127,  ..., -0.4448, -0.1624, -0.0674],
         [ 0.5166,  0.2656,  0.7983,  ..., -0.2479, -0.3174,  0.2295],
         [-0.0805,  0.0786,  0.4343,  ..., -0.0474, -0.2961,  0.0709]]],
       device='mps:0', dtype=torch.float16)
input_ids_1(テキストを機械処理可能な数値シーケンスに変換したもの)
tensor([[128000, 128006,    882, 128007,    271]], device='mps:0')
input_ids_2(テキストを機械処理可能な数値シーケンスに変換したもの)
tensor([[  2675,    527,   8647,    369,  26679,    279,   5216,    459,   8479,
           1288,   3351,   3196,    389,   1202,   1510,   2361,    323,    279,
           2218,   2361,     13,  11359,   1521,  17959,    512,     12,    578,
           8479,   2011,   5662,    279,   2218,    627,     12,  40633,    449,
            264,   3254,   3492,     25,    364,    455,    518,    364,   2996,
            518,    364,   1315,    518,    477,    364,   2414,   4527,   3234,
            539,   1005,  62603,    477,   5066,  41941,    627,     12,    578,
           8479,    596,   1933,    374,   6437,     11,    279,   2218,    596,
           1933,    374,   2579,     11,    323,  32116,      6,   1933,    374,
           6307,    627,  25017,    832,   3492,     25,    364,    455,    518,
            364,   2996,    518,    364,   2414,    518,    477,    364,   1315,
           4527, 128009, 128006,  78191, 128007,    271]], device='mps:0')
embeddings_1(input_ids_1を埋め込みに変換したもの)
tensor([[[-8.2970e-05,  2.5749e-04, -2.4605e-04,  ..., -3.2425e-04,
          -2.1553e-04,  4.7112e-04],
         [ 5.9509e-04, -2.2984e-04,  1.2970e-04,  ..., -1.3638e-04,
           4.3869e-04,  9.9182e-04],
         [ 3.9673e-03,  6.3782e-03,  1.3638e-04,  ...,  6.1417e-04,
          -8.4839e-03,  7.7438e-04],
         [-1.8358e-05, -6.8283e-04, -5.6505e-05,  ..., -1.6594e-04,
          -5.9509e-04,  9.7656e-04],
         [-2.5635e-03,  3.7537e-03, -4.5967e-04,  ...,  1.4267e-03,
          -6.3705e-04,  1.2512e-03]]], device='mps:0', dtype=torch.float16)
embeddings_2(input_ids_2を埋め込みに変換したもの)
tensor([[[-3.7689e-03,  8.0109e-04, -7.5073e-03,  ...,  1.1353e-02,
           3.3569e-03, -1.3046e-03],
         [ 3.6621e-03,  7.0572e-04,  1.0071e-03,  ...,  3.0975e-03,
          -1.8692e-04,  7.9346e-03],
         [ 1.3580e-03, -5.7602e-04,  1.7334e-02,  ..., -1.0132e-02,
          -1.5991e-02, -7.4158e-03],
         ...,
         [-9.2163e-03, -2.1515e-03,  4.3640e-03,  ..., -6.5327e-05,
          -1.5335e-03,  8.1787e-03],
         [-1.8358e-05, -6.8283e-04, -5.6505e-05,  ..., -1.6594e-04,
          -5.9509e-04,  9.7656e-04],
         [-2.5635e-03,  3.7537e-03, -4.5967e-04,  ...,  1.4267e-03,
          -6.3705e-04,  1.2512e-03]]], device='mps:0', dtype=torch.float16)
concatenated_embedding -> [token_embeddings_part1, image_features, token_embeddings_part2]
tensor([[[-8.2970e-05,  2.5749e-04, -2.4605e-04,  ..., -3.2425e-04,
          -2.1553e-04,  4.7112e-04],
         [ 5.9509e-04, -2.2984e-04,  1.2970e-04,  ..., -1.3638e-04,
           4.3869e-04,  9.9182e-04],
         [ 3.9673e-03,  6.3782e-03,  1.3638e-04,  ...,  6.1417e-04,
          -8.4839e-03,  7.7438e-04],
         ...,
         [-9.2163e-03, -2.1515e-03,  4.3640e-03,  ..., -6.5327e-05,
          -1.5335e-03,  8.1787e-03],
         [-1.8358e-05, -6.8283e-04, -5.6505e-05,  ..., -1.6594e-04,
          -5.9509e-04,  9.7656e-04],
         [-2.5635e-03,  3.7537e-03, -4.5967e-04,  ...,  1.4267e-03,
          -6.3705e-04,  1.2512e-03]]], device='mps:0', dtype=torch.float16)
attention_mask
tensor([[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]],
       device='mps:0')
