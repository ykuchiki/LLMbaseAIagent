prompt文
<|start_header_id|>user<|end_header_id|>

<image>You are responsible for determining the direction an agent should move based on its current position and the target position. Follow these guidelines:
- The agent must reach the target.
- Respond with a single word: 'up', 'down', 'right', or 'left'. Do not use punctuation or extra explanations.
- The agent can not go through obstacles.- The agent's color is blue, the target's color is red, and obstacles' color is green.
Choose one word: 'up', 'down', 'left', or 'right'.<|eot_id|><|start_header_id|>assistant<|end_header_id|>


input_ids
[128000, 128006, 882, 128007, 271, -200, 2675, 527, 8647, 369, 26679, 279, 5216, 459, 8479, 1288, 3351, 3196, 389, 1202, 1510, 2361, 323, 279, 2218, 2361, 13, 11359, 1521, 17959, 512, 12, 578, 8479, 2011, 5662, 279, 2218, 627, 12, 40633, 449, 264, 3254, 3492, 25, 364, 455, 518, 364, 2996, 518, 364, 1315, 518, 477, 364, 2414, 4527, 3234, 539, 1005, 62603, 477, 5066, 41941, 627, 12, 578, 8479, 649, 539, 733, 1555, 32116, 12898, 578, 8479, 596, 1933, 374, 6437, 11, 279, 2218, 596, 1933, 374, 2579, 11, 323, 32116, 6, 1933, 374, 6307, 627, 25017, 832, 3492, 25, 364, 455, 518, 364, 2996, 518, 364, 2414, 518, 477, 364, 1315, 4527, 128009, 128006, 78191, 128007, 271]
torch.tensor(input_ids, dtype=torch.long)
tensor([128000, 128006,    882, 128007,    271,   -200,   2675,    527,   8647,
           369,  26679,    279,   5216,    459,   8479,   1288,   3351,   3196,
           389,   1202,   1510,   2361,    323,    279,   2218,   2361,     13,
         11359,   1521,  17959,    512,     12,    578,   8479,   2011,   5662,
           279,   2218,    627,     12,  40633,    449,    264,   3254,   3492,
            25,    364,    455,    518,    364,   2996,    518,    364,   1315,
           518,    477,    364,   2414,   4527,   3234,    539,   1005,  62603,
           477,   5066,  41941,    627,     12,    578,   8479,    649,    539,
           733,   1555,  32116,  12898,    578,   8479,    596,   1933,    374,
          6437,     11,    279,   2218,    596,   1933,    374,   2579,     11,
           323,  32116,      6,   1933,    374,   6307,    627,  25017,    832,
          3492,     25,    364,    455,    518,    364,   2996,    518,    364,
          2414,    518,    477,    364,   1315,   4527, 128009, 128006,  78191,
        128007,    271])
image_inputs　画像データを前処理して画像認識モデルに入力できる形式に変換したもの，processorインスタンスにより生成
tensor([[[1., 1., 1.,  ..., 1., 1., 1.],
         [1., 1., 1.,  ..., 1., 1., 1.],
         [1., 1., 1.,  ..., 1., 1., 1.],
         ...,
         [1., 1., 1.,  ..., 1., 1., 1.],
         [1., 1., 1.,  ..., 1., 1., 1.],
         [1., 1., 1.,  ..., 1., 1., 1.]],

        [[1., 1., 1.,  ..., 1., 1., 1.],
         [1., 1., 1.,  ..., 1., 1., 1.],
         [1., 1., 1.,  ..., 1., 1., 1.],
         ...,
         [1., 1., 1.,  ..., 1., 1., 1.],
         [1., 1., 1.,  ..., 1., 1., 1.],
         [1., 1., 1.,  ..., 1., 1., 1.]],

        [[1., 1., 1.,  ..., 1., 1., 1.],
         [1., 1., 1.,  ..., 1., 1., 1.],
         [1., 1., 1.,  ..., 1., 1., 1.],
         ...,
         [1., 1., 1.,  ..., 1., 1., 1.],
         [1., 1., 1.,  ..., 1., 1., 1.],
         [1., 1., 1.,  ..., 1., 1., 1.]]], device='mps:0')
image_forward_outs 認識モデルに画像データを入力した後の出力
BaseModelOutputWithPooling(last_hidden_state=tensor([[[-3.0664,  0.7012,  0.8423,  ...,  0.6177, -0.8486, -0.1115],
         [-0.0868, -0.2278, -0.3418,  ..., -0.0286,  0.3447, -0.1466],
         [-0.1621, -0.2764, -0.1638,  ...,  0.0363,  0.1426,  0.0414],
         ...,
         [-0.5405, -0.7886,  0.6885,  ..., -0.3586, -0.6812, -0.3586],
         [-2.7461,  1.2451,  1.8965,  ..., -0.2172, -1.5615, -0.8794],
         [-2.8906,  0.3811,  0.6313,  ...,  0.0743, -1.3652, -0.7290]]],
       device='mps:0', dtype=torch.float16), pooler_output=tensor([[ 0.1862, -0.2588, -0.0876,  ...,  0.2129, -0.4541,  0.1404]],
       device='mps:0', dtype=torch.float16), hidden_states=(tensor([[[1.3809, 1.4785, 1.2197,  ..., 1.3828, 2.6406, 1.4561],
         [1.3828, 1.5029, 1.2607,  ..., 1.3945, 2.3086, 1.4482],
         [1.3828, 1.5273, 1.2900,  ..., 1.4014, 2.1367, 1.4473],
         ...,
         [1.4277, 1.4990, 1.3154,  ..., 1.4238, 1.2627, 1.4473],
         [1.3799, 1.5479, 1.2744,  ..., 1.4111, 1.1406, 1.4404],
         [1.3662, 1.5605, 1.2314,  ..., 1.4043, 0.7402, 1.4150]]],
       device='mps:0', dtype=torch.float16), tensor([[[1.6270, 1.5547, 1.6152,  ..., 1.5381, 2.3535, 1.5674],
         [1.5947, 1.5957, 1.6494,  ..., 1.5732, 2.0430, 1.5908],
         [1.6152, 1.6123, 1.6719,  ..., 1.5430, 1.8398, 1.5635],
         ...,
         [1.6055, 1.6348, 1.7041,  ..., 1.6152, 1.2549, 1.6172],
         [1.6074, 1.6211, 1.6875,  ..., 1.6064, 0.8960, 1.5830],
         [1.6182, 1.6250, 1.6523,  ..., 1.5664, 0.4941, 1.5332]]],
       device='mps:0', dtype=torch.float16), tensor([[[1.5654, 1.6201, 1.5615,  ..., 1.6260, 2.1719, 1.4619],
         [1.5303, 1.6875, 1.6211,  ..., 1.6074, 1.9238, 1.5332],
         [1.5488, 1.7412, 1.7012,  ..., 1.5723, 1.7246, 1.4795],
         ...,
         [1.5059, 1.7305, 1.6260,  ..., 1.6260, 1.3105, 1.6104],
         [1.5703, 1.6182, 1.5977,  ..., 1.6582, 1.0283, 1.5527],
         [1.5938, 1.6650, 1.5752,  ..., 1.6631, 0.6240, 1.4697]]],
       device='mps:0', dtype=torch.float16), tensor([[[1.3730, 1.4883, 1.7617,  ..., 1.6953, 1.8691, 1.4805],
         [1.6182, 1.6768, 1.8975,  ..., 1.4609, 1.6250, 1.3838],
         [1.6934, 1.7754, 1.9824,  ..., 1.3418, 1.4248, 1.2910],
         ...,
         [1.5283, 1.6504, 1.7559,  ..., 1.6992, 1.4365, 1.6172],
         [1.4453, 1.5127, 1.7861,  ..., 1.7256, 1.0518, 1.5576],
         [1.3691, 1.5215, 1.7861,  ..., 1.7559, 0.6250, 1.5244]]],
       device='mps:0', dtype=torch.float16), tensor([[[1.3818, 1.5352, 1.7812,  ..., 1.8906, 1.9971, 1.5576],
         [1.6289, 1.6279, 1.8125,  ..., 1.5117, 1.6611, 1.3750],
         [1.8076, 1.6660, 1.7744,  ..., 1.3320, 1.3887, 1.1592],
         ...,
         [1.7461, 1.5176, 1.5566,  ..., 1.7646, 1.7373, 1.6602],
         [1.4941, 1.4268, 1.6738,  ..., 1.8682, 1.3506, 1.6396],
         [1.2725, 1.4170, 1.8096,  ..., 1.9785, 0.8071, 1.5986]]],
       device='mps:0', dtype=torch.float16), tensor([[[1.4814, 1.4404, 1.5684,  ..., 1.9043, 1.9004, 1.5312],
         [1.7480, 1.6885, 1.5068,  ..., 1.6240, 1.5293, 1.5205],
         [1.9482, 1.6650, 1.5654,  ..., 1.5205, 1.1943, 1.3252],
         ...,
         [1.7920, 1.4932, 1.3574,  ..., 1.8730, 1.5527, 1.6553],
         [1.5117, 1.5039, 1.4180,  ..., 1.9443, 1.2207, 1.5254],
         [1.3271, 1.5029, 1.6436,  ..., 1.9736, 0.7656, 1.4551]]],
       device='mps:0', dtype=torch.float16), tensor([[[1.5752, 1.7236, 1.3682,  ..., 1.6475, 1.7354, 1.5244],
         [1.7373, 1.7197, 1.3174,  ..., 1.5996, 1.4639, 1.3936],
         [1.8887, 1.7324, 1.3975,  ..., 1.4697, 1.1416, 1.1924],
         ...,
         [1.6582, 1.4697, 1.2100,  ..., 1.7656, 1.4473, 1.5322],
         [1.4658, 1.5225, 1.2930,  ..., 1.8086, 1.2119, 1.4268],
         [1.3018, 1.5938, 1.3711,  ..., 1.9131, 0.6069, 1.4463]]],
       device='mps:0', dtype=torch.float16), tensor([[[1.6738, 1.5830, 1.5352,  ..., 1.7383, 1.8906, 1.5059],
         [1.6768, 1.6338, 1.3115,  ..., 1.5049, 1.4727, 1.6475],
         [1.8779, 1.7314, 1.3379,  ..., 1.4727, 1.2051, 1.5527],
         ...,
         [1.6406, 1.2764, 1.2559,  ..., 1.6016, 1.2783, 1.8721],
         [1.5762, 1.3486, 1.4434,  ..., 1.6729, 1.1357, 1.6084],
         [1.5342, 1.4482, 1.4922,  ..., 1.8691, 0.6118, 1.4404]]],
       device='mps:0', dtype=torch.float16), tensor([[[1.6016, 1.6309, 1.5957,  ..., 1.8008, 1.6699, 1.2188],
         [1.6504, 1.6455, 1.4717,  ..., 1.6748, 1.4395, 1.6523],
         [1.8154, 1.7266, 1.4854,  ..., 1.5459, 1.2051, 1.5166],
         ...,
         [1.6123, 1.3135, 1.4668,  ..., 1.6416, 1.1602, 1.5938],
         [1.5508, 1.4863, 1.6846,  ..., 1.7275, 1.0469, 1.3613],
         [1.4434, 1.6006, 1.5547,  ..., 1.8594, 0.6074, 1.2578]]],
       device='mps:0', dtype=torch.float16), tensor([[[1.5186, 1.6523, 1.5684,  ..., 1.6357, 1.7979, 1.5254],
         [1.6826, 1.4971, 1.2881,  ..., 1.4453, 1.5029, 1.5635],
         [1.7598, 1.5342, 1.4189,  ..., 1.3779, 1.3281, 1.5684],
         ...,
         [1.7314, 1.4268, 1.5391,  ..., 1.4863, 1.2705, 1.7246],
         [1.5039, 1.5146, 1.6895,  ..., 1.4941, 1.1016, 1.6396],
         [1.3955, 1.6465, 1.5850,  ..., 1.5781, 0.7915, 1.6367]]],
       device='mps:0', dtype=torch.float16), tensor([[[1.4316, 1.5840, 1.3145,  ..., 1.5322, 1.7637, 1.3545],
         [1.5664, 1.4473, 1.3154,  ..., 1.5117, 1.4502, 1.6895],
         [1.6133, 1.5391, 1.5254,  ..., 1.4287, 1.4229, 1.8984],
         ...,
         [1.8164, 1.3467, 1.8604,  ..., 1.6523, 1.5742, 2.0234],
         [1.4990, 1.4150, 1.7471,  ..., 1.5635, 1.3184, 1.6309],
         [1.3086, 1.6689, 1.3359,  ..., 1.4531, 1.0908, 1.3984]]],
       device='mps:0', dtype=torch.float16), tensor([[[1.3066, 1.7588, 1.1484,  ..., 1.3965, 1.4658, 1.1562],
         [1.5869, 1.4688, 1.3555,  ..., 1.3506, 1.5205, 1.5859],
         [1.6260, 1.5518, 1.5293,  ..., 1.2500, 1.4053, 1.9629],
         ...,
         [1.7598, 1.4688, 1.9102,  ..., 1.8320, 1.5459, 1.9570],
         [1.4805, 1.6094, 1.7471,  ..., 1.6289, 1.3311, 1.7041],
         [1.3457, 1.7334, 1.2207,  ..., 1.2822, 1.0068, 1.3438]]],
       device='mps:0', dtype=torch.float16), tensor([[[1.2266, 1.9775, 0.9473,  ..., 1.5430, 1.3457, 1.0195],
         [1.6406, 1.1162, 1.1992,  ..., 1.3066, 1.4053, 1.6191],
         [1.6846, 1.3730, 1.5068,  ..., 1.3516, 1.4473, 1.8936],
         ...,
         [1.9717, 1.6172, 1.8330,  ..., 1.9785, 1.4238, 1.9053],
         [1.4541, 1.9033, 1.8750,  ..., 1.6387, 1.2139, 1.8398],
         [1.3369, 1.9600, 1.1514,  ..., 1.4785, 0.9316, 1.3350]]],
       device='mps:0', dtype=torch.float16), tensor([[[1.1201, 1.9844, 1.0098,  ..., 1.4170, 1.3516, 1.3467],
         [1.5654, 1.0254, 0.8906,  ..., 1.3135, 1.3350, 1.8223],
         [1.5488, 1.4316, 1.3125,  ..., 1.3662, 1.2695, 1.9668],
         ...,
         [1.9619, 1.7305, 1.7676,  ..., 1.7578, 1.3662, 2.1152],
         [1.3789, 1.9238, 1.6309,  ..., 1.5498, 1.1211, 2.0234],
         [1.3281, 2.0488, 1.0508,  ..., 1.3799, 0.8735, 1.5361]]],
       device='mps:0', dtype=torch.float16), tensor([[[0.7563, 1.8564, 1.1162,  ..., 1.3779, 1.4082, 1.1357],
         [1.6367, 1.0527, 0.9199,  ..., 1.3506, 1.5918, 1.6885],
         [1.7061, 1.3662, 1.2871,  ..., 1.4355, 1.5420, 1.7168],
         ...,
         [1.9082, 1.6387, 1.6279,  ..., 1.7715, 1.7266, 1.7861],
         [1.1592, 1.8242, 1.6016,  ..., 1.4141, 1.2500, 1.7129],
         [1.0566, 1.8906, 1.0273,  ..., 1.2383, 0.9663, 1.3721]]],
       device='mps:0', dtype=torch.float16), tensor([[[0.4175, 1.6455, 0.8662,  ..., 1.3291, 1.6113, 0.7256],
         [1.6445, 0.8525, 0.7700,  ..., 1.3545, 1.6641, 1.8447],
         [1.6465, 1.1230, 1.1689,  ..., 1.4717, 1.6367, 1.9023],
         ...,
         [1.6045, 1.3926, 1.4658,  ..., 1.9473, 1.7715, 1.9385],
         [0.9507, 1.7217, 1.3418,  ..., 1.3984, 1.3516, 1.6709],
         [0.7031, 1.7188, 0.8276,  ..., 1.0752, 1.2236, 1.2373]]],
       device='mps:0', dtype=torch.float16), tensor([[[0.6128, 1.7539, 1.3164,  ..., 1.4004, 1.2695, 0.7607],
         [1.7861, 0.9165, 0.7725,  ..., 1.2090, 1.6445, 1.9590],
         [1.8789, 1.1475, 1.1338,  ..., 1.3926, 1.6055, 1.9844],
         ...,
         [1.6777, 1.4629, 1.8193,  ..., 1.8955, 1.3760, 1.8770],
         [0.9189, 1.9082, 1.6689,  ..., 1.5713, 0.9092, 1.8076],
         [0.7822, 1.8652, 1.1816,  ..., 1.1953, 0.9404, 1.3223]]],
       device='mps:0', dtype=torch.float16), tensor([[[0.4199, 1.6191, 1.3076,  ..., 1.4502, 1.6016, 0.9434],
         [1.6650, 0.7046, 0.8794,  ..., 1.0488, 1.6953, 1.8887],
         [1.8115, 1.0146, 1.1924,  ..., 1.3125, 1.7168, 1.9688],
         ...,
         [1.6201, 1.1621, 2.0508,  ..., 1.6680, 1.8467, 1.7227],
         [0.8296, 1.9082, 1.7490,  ..., 1.3623, 1.1152, 1.6631],
         [0.6733, 1.8145, 1.2266,  ..., 1.2158, 1.1660, 1.3789]]],
       device='mps:0', dtype=torch.float16), tensor([[[0.2930, 1.5312, 1.3516,  ..., 1.4463, 1.4590, 0.7974],
         [1.6240, 0.8887, 0.7588,  ..., 1.1680, 1.5381, 1.6660],
         [1.7695, 1.2227, 1.0996,  ..., 1.4629, 1.6553, 1.8135],
         ...,
         [1.4043, 1.2764, 1.9053,  ..., 1.4355, 1.7227, 1.4092],
         [0.7031, 1.7822, 1.5898,  ..., 1.1484, 0.8120, 1.6270],
         [0.4836, 1.7461, 1.1328,  ..., 1.3936, 0.7827, 1.4092]]],
       device='mps:0', dtype=torch.float16), tensor([[[-0.1007,  1.2871,  1.6152,  ...,  1.7314,  1.7285,  0.3943],
         [ 1.6270,  0.5625,  0.4790,  ...,  1.1553,  1.7734,  1.5645],
         [ 1.6934,  0.9038,  0.7832,  ...,  1.3887,  1.9854,  1.5996],
         ...,
         [ 1.3174,  1.2539,  1.7959,  ...,  1.3613,  1.9658,  1.3984],
         [ 0.3186,  1.5938,  1.6309,  ...,  1.3535,  1.1855,  1.2568],
         [ 0.1379,  1.4160,  1.3408,  ...,  1.7246,  1.5107,  0.8999]]],
       device='mps:0', dtype=torch.float16), tensor([[[-0.5679,  1.2324,  1.7656,  ...,  1.6426,  1.5439, -0.1711],
         [ 1.4492,  0.5225,  0.2573,  ...,  1.2832,  1.7207,  1.3857],
         [ 1.6172,  0.8613,  0.6143,  ...,  1.5576,  1.8672,  1.3311],
         ...,
         [ 1.1562,  1.0762,  1.3184,  ...,  1.0967,  1.5371,  1.0957],
         [-0.2603,  1.8711,  1.6768,  ...,  1.2090,  0.9414,  0.6768],
         [-0.2612,  1.6621,  1.5869,  ...,  1.5312,  1.0654,  0.0420]]],
       device='mps:0', dtype=torch.float16), tensor([[[-0.8545,  1.0293,  2.1602,  ...,  1.5537,  1.3379, -0.1475],
         [ 1.0293,  0.5840,  0.1228,  ...,  1.3643,  1.7148,  1.5947],
         [ 1.3037,  0.8086,  0.4607,  ...,  1.6582,  2.0664,  1.5752],
         ...,
         [ 0.9253,  1.2148,  1.6904,  ...,  0.4565,  1.0801,  1.4648],
         [-0.4629,  1.8789,  1.7666,  ...,  1.0703,  0.6904,  0.8242],
         [-0.4565,  1.6494,  2.0059,  ...,  1.5244,  1.0566,  0.0964]]],
       device='mps:0', dtype=torch.float16), tensor([[[-0.5718,  1.5312,  2.0742,  ...,  1.5234,  1.2881,  0.0913],
         [ 1.3711,  1.1777, -0.1732,  ...,  1.3887,  2.1426,  1.5664],
         [ 1.6934,  1.3174,  0.1533,  ...,  1.6836,  2.5625,  1.5684],
         ...,
         [ 1.3008,  1.3330,  1.5449,  ...,  0.4695,  1.4775,  1.7891],
         [-0.1719,  2.5508,  1.5605,  ...,  1.0664,  0.4946,  1.1816],
         [-0.1729,  2.1895,  1.9355,  ...,  1.5439,  1.0430,  0.1821]]],
       device='mps:0', dtype=torch.float16), tensor([[[-0.6680,  1.5957,  2.3359,  ...,  1.1201,  1.6816, -0.3882],
         [ 1.2119,  1.5908, -0.2031,  ...,  1.3408,  2.6562,  1.2061],
         [ 1.7070,  1.7139,  0.0752,  ...,  1.6973,  2.9746,  1.1348],
         ...,
         [ 1.3682,  1.5645,  1.3164,  ...,  0.2443,  1.7109,  1.3008],
         [-0.2739,  2.8711,  2.0684,  ...,  0.2534,  0.3582,  0.3042],
         [-0.3313,  2.4160,  2.3750,  ...,  1.0352,  1.0977, -0.6865]]],
       device='mps:0', dtype=torch.float16), tensor([[[-0.3535,  1.4795,  3.0840,  ...,  0.9937,  1.4824, -0.3730],
         [ 1.5449,  1.6963,  0.4131,  ...,  1.1045,  2.7637,  1.1582],
         [ 1.7822,  1.5869,  0.4517,  ...,  1.4170,  3.0977,  1.5117],
         ...,
         [ 1.4512,  0.5596,  2.1562,  ..., -0.5000,  1.3008,  1.6426],
         [-0.3040,  2.7461,  3.2656,  ..., -0.5547, -0.3735,  0.5293],
         [ 0.0063,  2.1621,  2.9648,  ...,  0.8486,  0.9976, -0.6997]]],
       device='mps:0', dtype=torch.float16), tensor([[[-7.5732e-01,  1.5625e+00,  3.1406e+00,  ...,  1.1270e+00,
           9.0723e-01,  1.9409e-02],
         [ 1.2168e+00,  8.1738e-01,  3.5791e-01,  ...,  1.2207e-01,
           3.4863e+00,  1.5537e+00],
         [ 1.8018e+00,  1.5850e+00,  3.4180e-03,  ...,  1.1504e+00,
           3.6016e+00,  1.6914e+00],
         ...,
         [ 1.2852e+00,  6.9434e-01,  3.1055e+00,  ..., -5.8887e-01,
           4.8535e-01,  2.1367e+00],
         [-1.1016e+00,  3.2910e+00,  3.9492e+00,  ..., -4.3115e-01,
          -4.2041e-01,  9.0625e-01],
         [-2.1289e-01,  1.9316e+00,  3.0625e+00,  ...,  9.1943e-01,
           6.3770e-01, -5.9277e-01]]], device='mps:0', dtype=torch.float16), tensor([[[-3.0488,  1.2578,  3.0254,  ...,  0.7773, -0.3789,  0.7549],
         [ 0.5645,  0.4727,  1.0107,  ..., -0.1990,  3.1211,  2.0938],
         [ 1.2520,  1.3721,  0.2244,  ...,  1.2061,  2.7793,  2.2520],
         ...,
         [ 0.7402,  0.5771,  2.8809,  ...,  0.0278,  0.1201,  1.8438],
         [-1.7959,  3.1191,  4.0508,  ...,  0.6528, -0.9512,  0.2539],
         [-1.5703,  1.3086,  3.2188,  ...,  0.5078, -0.6328, -0.4744]]],
       device='mps:0', dtype=torch.float16), tensor([[[-3.8867,  2.2207,  2.5703,  ...,  2.4316, -0.1499,  1.1826],
         [-0.7598, -1.5830, -1.2236,  ...,  1.2705,  2.0801,  0.3135],
         [-1.9326, -2.8828, -0.7227,  ...,  1.7734,  1.0156,  1.5664],
         ...,
         [ 0.2908, -0.1630,  2.2070,  ...,  0.9663,  0.3027,  0.8467],
         [-2.9922,  3.0762,  4.0664,  ...,  1.1465, -0.9937, -0.0610],
         [-2.9473,  1.6406,  2.1484,  ...,  1.5684, -0.6021,  0.2600]]],
       device='mps:0', dtype=torch.float16)), attentions=None)
image_features image_forward_outsの後ろから2層目の出力だけを抽出したもの
tensor([[[-3.0488,  1.2578,  3.0254,  ...,  0.7773, -0.3789,  0.7549],
         [ 0.5645,  0.4727,  1.0107,  ..., -0.1990,  3.1211,  2.0938],
         [ 1.2520,  1.3721,  0.2244,  ...,  1.2061,  2.7793,  2.2520],
         ...,
         [ 0.7402,  0.5771,  2.8809,  ...,  0.0278,  0.1201,  1.8438],
         [-1.7959,  3.1191,  4.0508,  ...,  0.6528, -0.9512,  0.2539],
         [-1.5703,  1.3086,  3.2188,  ...,  0.5078, -0.6328, -0.4744]]],
       device='mps:0', dtype=torch.float16)
projected_embeddings 画像の特徴ベクトル(image_features)を別の埋め込み空間にマッピングし，テキストの埋め込みベクトルと結合できるようにする
tensor([[[ 0.1506,  0.2517,  0.3425,  ...,  0.1512, -0.0976,  0.2280],
         [ 0.8872,  0.5693, -1.1816,  ..., -0.6465, -0.3179,  0.3953],
         [-0.8047,  0.5142, -0.3662,  ..., -0.0313, -0.7407, -1.0488],
         ...,
         [ 0.6187,  0.1339,  0.6372,  ..., -0.2793, -0.1783,  0.0478],
         [ 0.7139,  0.2598,  0.9873,  ..., -0.2607, -0.2983,  0.3110],
         [-0.1117,  0.1984,  0.3892,  ...,  0.0046, -0.3391,  0.0608]]],
       device='mps:0', dtype=torch.float16)
input_ids_1(テキストを機械処理可能な数値シーケンスに変換したもの)
tensor([[128000, 128006,    882, 128007,    271]], device='mps:0')
input_ids_2(テキストを機械処理可能な数値シーケンスに変換したもの)
tensor([[  2675,    527,   8647,    369,  26679,    279,   5216,    459,   8479,
           1288,   3351,   3196,    389,   1202,   1510,   2361,    323,    279,
           2218,   2361,     13,  11359,   1521,  17959,    512,     12,    578,
           8479,   2011,   5662,    279,   2218,    627,     12,  40633,    449,
            264,   3254,   3492,     25,    364,    455,    518,    364,   2996,
            518,    364,   1315,    518,    477,    364,   2414,   4527,   3234,
            539,   1005,  62603,    477,   5066,  41941,    627,     12,    578,
           8479,    649,    539,    733,   1555,  32116,  12898,    578,   8479,
            596,   1933,    374,   6437,     11,    279,   2218,    596,   1933,
            374,   2579,     11,    323,  32116,      6,   1933,    374,   6307,
            627,  25017,    832,   3492,     25,    364,    455,    518,    364,
           2996,    518,    364,   2414,    518,    477,    364,   1315,   4527,
         128009, 128006,  78191, 128007,    271]], device='mps:0')
embeddings_1(input_ids_1を埋め込みに変換したもの)
tensor([[[-8.2970e-05,  2.5749e-04, -2.4605e-04,  ..., -3.2425e-04,
          -2.1553e-04,  4.7112e-04],
         [ 5.9509e-04, -2.2984e-04,  1.2970e-04,  ..., -1.3638e-04,
           4.3869e-04,  9.9182e-04],
         [ 3.9673e-03,  6.3782e-03,  1.3638e-04,  ...,  6.1417e-04,
          -8.4839e-03,  7.7438e-04],
         [-1.8358e-05, -6.8283e-04, -5.6505e-05,  ..., -1.6594e-04,
          -5.9509e-04,  9.7656e-04],
         [-2.5635e-03,  3.7537e-03, -4.5967e-04,  ...,  1.4267e-03,
          -6.3705e-04,  1.2512e-03]]], device='mps:0', dtype=torch.float16)
embeddings_2(input_ids_2を埋め込みに変換したもの)
tensor([[[-3.7689e-03,  8.0109e-04, -7.5073e-03,  ...,  1.1353e-02,
           3.3569e-03, -1.3046e-03],
         [ 3.6621e-03,  7.0572e-04,  1.0071e-03,  ...,  3.0975e-03,
          -1.8692e-04,  7.9346e-03],
         [ 1.3580e-03, -5.7602e-04,  1.7334e-02,  ..., -1.0132e-02,
          -1.5991e-02, -7.4158e-03],
         ...,
         [-9.2163e-03, -2.1515e-03,  4.3640e-03,  ..., -6.5327e-05,
          -1.5335e-03,  8.1787e-03],
         [-1.8358e-05, -6.8283e-04, -5.6505e-05,  ..., -1.6594e-04,
          -5.9509e-04,  9.7656e-04],
         [-2.5635e-03,  3.7537e-03, -4.5967e-04,  ...,  1.4267e-03,
          -6.3705e-04,  1.2512e-03]]], device='mps:0', dtype=torch.float16)
concatenated_embedding -> [token_embeddings_part1, image_features, token_embeddings_part2]
tensor([[[-8.2970e-05,  2.5749e-04, -2.4605e-04,  ..., -3.2425e-04,
          -2.1553e-04,  4.7112e-04],
         [ 5.9509e-04, -2.2984e-04,  1.2970e-04,  ..., -1.3638e-04,
           4.3869e-04,  9.9182e-04],
         [ 3.9673e-03,  6.3782e-03,  1.3638e-04,  ...,  6.1417e-04,
          -8.4839e-03,  7.7438e-04],
         ...,
         [-9.2163e-03, -2.1515e-03,  4.3640e-03,  ..., -6.5327e-05,
          -1.5335e-03,  8.1787e-03],
         [-1.8358e-05, -6.8283e-04, -5.6505e-05,  ..., -1.6594e-04,
          -5.9509e-04,  9.7656e-04],
         [-2.5635e-03,  3.7537e-03, -4.5967e-04,  ...,  1.4267e-03,
          -6.3705e-04,  1.2512e-03]]], device='mps:0', dtype=torch.float16)
attention_mask
tensor([[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1]], device='mps:0')
